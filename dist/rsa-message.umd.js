!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).RSAMessage=t()}(this,(function(){"use strict";function e(e,t,i,r){return new(i||(i=Promise))((function(n,o){function s(e){try{a(r.next(e))}catch(e){o(e)}}function y(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,y)}a((r=r.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const t=()=>"undefined"!=typeof window?window.crypto:require("crypto").webcrypto,i=()=>"undefined"!=typeof window?new window.TextEncoder:new(require("util").TextEncoder);return class{constructor(){this.publicKeys=new Map,this.genKeyPair=()=>e(this,void 0,void 0,(function*(){const e=yield t().subtle.generateKey({name:"RSA-OAEP",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-256"},!0,["encrypt","decrypt"]),i=yield t().subtle.exportKey("spki",e.publicKey),r=yield t().subtle.exportKey("pkcs8",e.privateKey);return this.publicKey=String.fromCharCode(...Array.from(new Uint8Array(i))),this.privateKey=String.fromCharCode(...Array.from(new Uint8Array(r))),this.publicKey})),this.importPrivateKey=(i,r)=>e(this,void 0,void 0,(function*(){return yield t().subtle.importKey("pkcs8",new Uint8Array([...i].map((e=>e.charCodeAt(0)))),{name:"decrypt"===r?"RSA-OAEP":"RSA-PSS",hash:"SHA-256"},!0,[r])})),this.signMessage=r=>e(this,void 0,void 0,(function*(){const e=i().encode(r),n=yield this.importPrivateKey(this.privateKey,"sign");return yield t().subtle.sign({name:"RSA-PSS",saltLength:32},n,e)})),this.importPublicKey=(i,r)=>e(this,void 0,void 0,(function*(){return yield t().subtle.importKey("spki",new Uint8Array([...i].map((e=>e.charCodeAt(0)))),{name:"encrypt"===r?"RSA-OAEP":"RSA-PSS",hash:"SHA-256"},!0,[r])})),this.encryptMessage=(r,n)=>e(this,void 0,void 0,(function*(){const e=this.publicKeys.get(n);if(!e)throw new Error("Public key not found for user");const o=yield this.importPublicKey(e,"encrypt"),s=i().encode(r),y=yield this.generateAESKey(),a=t().getRandomValues(new Uint8Array(12)),d=yield t().subtle.encrypt({name:"AES-GCM",iv:a},y,s),c=yield t().subtle.exportKey("raw",y);return{iv:a,encryptedMessage:d,encryptedAESKey:yield t().subtle.encrypt({name:"RSA-OAEP"},o,c),signature:yield this.signMessage(r)}})),this.verifySignature=(r,n,o)=>e(this,void 0,void 0,(function*(){const e=this.publicKeys.get(o);if(!e)throw new Error("Public key not found for user");const s=yield this.importPublicKey(e,"verify"),y=i().encode(n);return yield t().subtle.verify({name:"RSA-PSS",saltLength:32},s,r,y)})),this.decryptMessage=(i,r)=>e(this,void 0,void 0,(function*(){if(!this.publicKeys.get(r))throw new Error("Public key not found for user");const{iv:e,encryptedMessage:n,encryptedAESKey:o,signature:s}=i,y=yield this.importPrivateKey(this.privateKey,"decrypt"),a=yield t().subtle.decrypt({name:"RSA-OAEP"},y,o),d=yield t().subtle.importKey("raw",a,"AES-GCM",!0,["decrypt"]),c=yield t().subtle.decrypt({name:"AES-GCM",iv:e},d,n),u=("undefined"!=typeof window?new window.TextDecoder:new(require("util").TextDecoder)).decode(c);if(!(yield this.verifySignature(s,u,r)))throw new Error("Signature verification failed");return u})),this.privateKey="",this.publicKey=""}get publickey(){return btoa(this.publicKey)}get privatekey(){return btoa(this.privateKey)}generateAESKey(){return e(this,void 0,void 0,(function*(){return yield t().subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}init(t,i){return e(this,void 0,void 0,(function*(){return t&&i?(this.publicKey=atob(t),this.privateKey=atob(i),t):(t=yield this.genKeyPair(),btoa(t))}))}setPublicKey(e,t){t=atob(t),this.publicKeys.set(e,t)}exportEncryptedMessage(e){return btoa(JSON.stringify({iv:String.fromCharCode(...e.iv),encryptedMessage:String.fromCharCode(...new Uint8Array(e.encryptedMessage)),encryptedAESKey:String.fromCharCode(...new Uint8Array(e.encryptedAESKey)),signature:String.fromCharCode(...new Uint8Array(e.signature))}))}importEncryptedMessage(e){const t=JSON.parse(atob(e));return{iv:new Uint8Array([...t.iv].map((e=>e.charCodeAt(0)))),encryptedMessage:new Uint8Array([...t.encryptedMessage].map((e=>e.charCodeAt(0)))),encryptedAESKey:new Uint8Array([...t.encryptedAESKey].map((e=>e.charCodeAt(0)))),signature:new Uint8Array([...t.signature].map((e=>e.charCodeAt(0))))}}}}));
