function e(e,t,i,r){return new(i||(i=Promise))((function(n,o){function y(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(y,s)}c((r=r.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;class t{constructor(){this.publicKeys=new Map,this.genKeyPair=()=>e(this,void 0,void 0,(function*(){const e=yield window.crypto.subtle.generateKey({name:"RSA-OAEP",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-256"},!0,["encrypt","decrypt"]),t=yield window.crypto.subtle.exportKey("spki",e.publicKey),i=yield window.crypto.subtle.exportKey("pkcs8",e.privateKey);return this.publicKey=String.fromCharCode(...new Uint8Array(t)),this.privateKey=String.fromCharCode(...new Uint8Array(i)),this.publicKey})),this.importPrivateKey=(t,i)=>e(this,void 0,void 0,(function*(){return yield window.crypto.subtle.importKey("pkcs8",new Uint8Array([...t].map((e=>e.charCodeAt(0)))),{name:"decrypt"===i?"RSA-OAEP":"RSA-PSS",hash:"SHA-256"},!0,[i])})),this.signMessage=t=>e(this,void 0,void 0,(function*(){const e=(new TextEncoder).encode(t),i=yield this.importPrivateKey(this.privateKey,"sign");return yield window.crypto.subtle.sign({name:"RSA-PSS",saltLength:32},i,e)})),this.importPublicKey=(t,i)=>e(this,void 0,void 0,(function*(){return yield window.crypto.subtle.importKey("spki",new Uint8Array([...t].map((e=>e.charCodeAt(0)))),{name:"encrypt"===i?"RSA-OAEP":"RSA-PSS",hash:"SHA-256"},!0,[i])})),this.encryptMessage=(t,i)=>e(this,void 0,void 0,(function*(){const e=this.publicKeys.get(i);if(!e)throw new Error("Public key not found for user");const r=yield this.importPublicKey(e,"encrypt"),n=(new TextEncoder).encode(t),o=yield this.generateAESKey(),y=window.crypto.getRandomValues(new Uint8Array(12)),s=yield window.crypto.subtle.encrypt({name:"AES-GCM",iv:y},o,n),c=yield window.crypto.subtle.exportKey("raw",o);return{iv:y,encryptedMessage:s,encryptedAESKey:yield window.crypto.subtle.encrypt({name:"RSA-OAEP"},r,c),signature:yield this.signMessage(t)}})),this.verifySignature=(t,i,r)=>e(this,void 0,void 0,(function*(){const e=this.publicKeys.get(r);if(!e)throw new Error("Public key not found for user");const n=yield this.importPublicKey(e,"verify"),o=(new TextEncoder).encode(i);return yield window.crypto.subtle.verify({name:"RSA-PSS",saltLength:32},n,t,o)})),this.decryptMessage=(t,i)=>e(this,void 0,void 0,(function*(){if(!this.publicKeys.get(i))throw new Error("Public key not found for user");const{iv:e,encryptedMessage:r,encryptedAESKey:n,signature:o}=t,y=yield this.importPrivateKey(this.privateKey,"decrypt"),s=yield window.crypto.subtle.decrypt({name:"RSA-OAEP"},y,n),c=yield window.crypto.subtle.importKey("raw",s,"AES-GCM",!0,["decrypt"]),d=yield window.crypto.subtle.decrypt({name:"AES-GCM",iv:e},c,r),a=(new TextDecoder).decode(d);if(!(yield this.verifySignature(o,a,i)))throw new Error("Signature verification failed");return a})),this.privateKey="",this.publicKey=""}get publickey(){return btoa(this.publicKey)}get privatekey(){return btoa(this.privateKey)}generateAESKey(){return e(this,void 0,void 0,(function*(){return yield window.crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}init(t,i){return e(this,void 0,void 0,(function*(){return t&&i?(this.publicKey=atob(t),this.privateKey=atob(i),t):(t=yield this.genKeyPair(),btoa(t))}))}setPublicKey(e,t){t=atob(t),this.publicKeys.set(e,t)}exportEncryptedMessage(e){const{iv:t,encryptedMessage:i,encryptedAESKey:r,signature:n}=e,o=JSON.stringify({iv:Array.from(t),encryptedMessage:Array.from(i),encryptedAESKey:Array.from(r),signature:Array.from(n)});return btoa(o)}importEncryptedMessage(e){const t=JSON.parse(atob(e));return{iv:new Uint8Array(t.iv),encryptedMessage:new Uint8Array(t.encryptedMessage),encryptedAESKey:new Uint8Array(t.encryptedAESKey),signature:new Uint8Array(t.signature)}}}export{t as default};
